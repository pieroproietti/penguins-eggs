/**
 * ./src/classes/ovary.ts
 * penguins-eggs v.10.0.0 / ecmascript 2020
 * author: Piero Proietti
 * email: piero.proietti@gmail.com
 * license: MIT
 */

import chalk from 'chalk'


// packages
import fs, { Dirent } from 'node:fs'
import { constants } from 'node:fs'
// backup
import { access } from 'node:fs/promises'
import path from 'node:path'
import shx from 'shelljs'

// interfaces
import { IAddons, IExcludes } from '../interfaces/index.js'

// libraries
import { exec } from '../lib/utils.js'
import CliAutologin from './cli-autologin.js'
import Incubator from './incubation/incubator.js'
import Settings from './settings.js'
import Users from './users.js'
import Diversions from './diversions.js'

// classes
import Utils from './utils.js'
import Repo from './yolk.js'

// Methods
import { fertilization } from './ovary.d/fertilization.js'
import { produce } from './ovary.d/produce.js'
import { bindLiveFs, uBindLiveFs } from './ovary.d/bind-live-fs.js'
import { bindVfs, ubindVfs } from './ovary.d/bind-vfs.js'
import { editLiveFs } from './ovary.d/edit-live-fs.js'
import { makeSquashfs, addRemoveExclusion } from './ovary.d/make-squashfs.js'
import { makeEfi } from './ovary.d/make-efi.js'
import { xorrisoCommand } from './ovary.d/xorriso-commend.js'
import { createXdgAutostart } from './ovary.d/create-xdg-autostart.js'
import { merged, mergedAndOverlay } from './ovary.d/merged.js'
import { makeIso } from './ovary.d/make-iso.js'
import { initrdAlpine, initrdArch, initrdDebian, initrdDracut } from './ovary.d/initrd.js'
import { userCreateLive } from './ovary.d/user-create-live.js'
import { syslinux } from './ovary.d/syslinux.js'
import { usersRemove} from './ovary.d/users-remove.js'
import { makeDotDisk } from './ovary.d/make-dot-disk.js'
import { kernelCopy } from './ovary.d/kernel-copy.js'
import { liveCreateStructure, tryCatch } from './ovary.d/live-create-structure.js'

// Functions
import rexec from './ovary.d/rexec.js'


// _dirname
const __dirname = path.dirname(new URL(import.meta.url).pathname)

/**
 * Ovary:
 */
export default class Ovary {
  cliAutologin = new CliAutologin()

  clone = false

  compression = ''

  cryptedclone = false

  echo = {}

  familyId = ''

  genisoimage = false

  incubator = {} as Incubator

  nest = ''

  settings = {} as Settings

  snapshot_basename = ''

  snapshot_prefix = ''

  theme = ''

  toNull = ''

  verbose = false

  volid = ''

  // I put methods on ovary.d
  public fertilization = fertilization
  public produce = produce
  public bindLiveFs = bindLiveFs
  public bindVfs = bindVfs
  public editLiveFs = editLiveFs
  public makeEfi = makeEfi
  public makeSquashfs = makeSquashfs
  public addRemoveExclusion = addRemoveExclusion
  public xorrisoCommand = xorrisoCommand
  public createXdgAutostart = createXdgAutostart
  public merged = merged
  public mergedAndOverlay = mergedAndOverlay
  public makeIso = makeIso
  public initrdAlpine = initrdAlpine
  public initrdArch = initrdArch
  public initrdDebian = initrdDebian
  public initrdDracut = initrdDracut
  public userCreateLive = userCreateLive
  public syslinux = syslinux
  public uBindLiveFs = uBindLiveFs
  public ubindVfs = ubindVfs
  public usersRemove = usersRemove
  public makeDotDisk = makeDotDisk
  public kernelCopy = kernelCopy
  public liveCreateStructure = liveCreateStructure
  public tryCatch = tryCatch
  
  /**
   * finished = show the results
   * @param scriptOnly
   */
  finished(scriptOnly = false) {
    Utils.titles('produce')
    if (scriptOnly) {
      console.log('eggs is finished!\n\nYou can find the scripts to build iso: ' + chalk.cyanBright(this.settings.isoFilename) + '\nin the ovarium: ' + chalk.cyanBright(this.settings.config.snapshot_dir) + '.')
      console.log('usage')
      console.log(chalk.cyanBright(`cd ${this.settings.config.snapshot_dir}`))
      console.log(chalk.cyanBright('sudo ./bind'))
      console.log('Make all yours modifications in the directories filesystem.squashfs and iso.')
      console.log('After when you are ready:')
      console.log(chalk.cyanBright('sudo ./mksquashfs'))
      console.log(chalk.cyanBright('sudo ./mkisofs'))
      console.log(chalk.cyanBright('sudo ./ubind'))
      console.log('happy hacking!')
    } else {
      console.log('eggs is finished!\n\nYou can find the file iso: ' + chalk.cyanBright(this.settings.isoFilename) + '\nin the nest: ' + chalk.cyanBright(this.settings.config.snapshot_dir) + '.')
    }

    console.log()
    console.log('Remember, on liveCD user = ' + chalk.cyanBright(this.settings.config.user_opt) + '/' + chalk.cyanBright(this.settings.config.user_opt_passwd))
    console.log('                    root = ' + chalk.cyanBright('root') + '/' + chalk.cyanBright(this.settings.config.root_passwd))

    if (this.genisoimage) {
      console.log(`Note: format UDF, generated by ${chalk.cyanBright('genisoimage')}`)
    }
  }



  /**
   * usersFill
  async usersFill(): Promise<Users[]> {
    if (this.verbose) {
      console.log('Ovary: usersFill')
    }

    const usersArray = []
    await access('/etc/passwd', constants.R_OK | constants.W_OK)
    const passwd = fs.readFileSync('/etc/passwd', 'utf8').split('\n')
    for (const element of passwd) {
      const line = element.split(':')
      const users = new Users(line[0], line[1], line[2], line[3], line[4], line[5], line[6])
      await users.getValues()
      if (users.password !== undefined) {
        usersArray.push(users)
      }
    }

    return usersArray
  }
  */

}

