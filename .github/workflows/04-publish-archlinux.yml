# =========================================================================================
# WORKFLOW DI BUILD E PUBBLICAZIONE DEL REPOSITORY PER ARCH LINUX
#
# Scopo:
#   Questo workflow automatizza la creazione del pacchetto di penguins-eggs per Arch Linux
#   e la sua pubblicazione nel repository Pacman 'penguins-eggs-repo'.
#
# Trigger:
#   - Push sul branch 'main'.
#   - Avvio manuale tramite 'workflow_dispatch'.
#
# Struttura:
#   1. Job 'build-arch':
#      - Estrae la versione da package.json.
#      - Aggiorna dinamicamente il file PKGBUILD con la nuova versione.
#      - Aggiorna i checksum dei sorgenti nel PKGBUILD (come utente non-root).
#      - Compila il pacchetto .pkg.tar.zst in un container Arch Linux pulito e
#        usando un utente non-root, come da best practice.
#   2. Job 'publish-repo': Eseguito in un container Arch Linux separato.
#      - Fa il checkout del repository 'penguins-eggs-repo'.
#      - Scarica l'artefatto (il pacchetto .pkg.tar.zst) dal job precedente.
#      - Aggiunge il nuovo pacchetto ai file del repository esistenti.
#      - Rigenera e firma il database del repository con 'repo-add --sign'.
#      - Esegue il commit e il push delle modifiche sul branch 'main' del repository.
#
# Prerequisiti (GitHub Secrets):
#   - GPG_SIGNING_KEY: La chiave GPG privata per firmare il repository.
#   - GPG_KEY_ID: L'identificativo breve della chiave GPG (usato da repo-add).
#   - GPG_PASSPHRASE: La passphrase della chiave GPG.
#   - PUBLISH_TOKEN: Un Personal Access Token (PAT) con permessi di scrittura
#     sul repository 'penguins-eggs-repo'.
# =========================================================================================

name: 04. Build and publish Arch Linux pkgs

on:
  workflow_dispatch:
  push:
    branches: [ main ]

jobs:
  build-arch:
    runs-on: ubuntu-latest
    container:
      image: archlinux
    steps:
      - name: 1. Checkout repository code
        uses: actions/checkout@v4

      - name: 2. Prepare Build Environment and Dependencies
        run: |
          pacman -Syu --noconfirm
          # Aggiunto jq e pacman-contrib (che contiene updpkgsums)
          pacman -S --noconfirm base-devel git pnpm jq pacman-contrib

      - name: 2a. Update PKGBUILD with version from package.json
        run: |
          # Estrai la versione dal file package.json
          VERSION=$(jq -r .version package.json)
          echo "Updating PKGBUILD to version: $VERSION"

          # Aggiorna la variabile pkgver nel file PKGBUILD
          sed -i "s/^pkgver=.*/pkgver=$VERSION/" ./packaging/arch/PKGBUILD

          # Resetta pkgrel a 1, come da best practice quando pkgver cambia
          sed -i 's/^pkgrel=.*/pkgrel=1/' ./packaging/arch/PKGBUILD

          # Mostra le righe modificate per verifica
          echo "PKGBUILD updated:"
          grep -E "^(pkgver|pkgrel)=" ./packaging/arch/PKGBUILD
      
      - name: 3. Create Build User and Set Permissions
        run: |
          useradd -m builder
          echo "builder ALL=(ALL) NOPASSWD: ALL" >> /etc/sudoers
          chown -R builder:builder "$GITHUB_WORKSPACE"

      - name: 4. Update Checksums and Build Package as Non-Root User
        run: |
          # Pulisci ogni pacchetto .pkg.tar.zst preesistente
          # per garantire che l'artefatto contenga solo il nuovo pacchetto
          rm -f *.pkg.tar.zst
          
          # Il resto dello script rimane invariato
          sudo -u builder updpkgsums
          sudo -u builder makepkg -s --noconfirm
        working-directory: ./packaging/arch 
        
      - name: 5. Upload Package Artifact
        uses: actions/upload-artifact@v4
        with:
          name: archlinux-package
          path: ./packaging/arch/*.pkg.tar.zst

  publish-repo:
    needs: build-arch
    runs-on: ubuntu-latest
    container: archlinux
    steps:
      - name: 1. Download Arch Linux artifact
        uses: actions/download-artifact@v4
        with:
          name: archlinux-package
          # Scarichiamo l'artefatto in una cartella temporanea
          path: ./artifact

      - name: 2. Clone Repo, Update Database, and Push
        run: |
          set -e
          
          # Installiamo le dipendenze
          pacman -Syu --noconfirm
          pacman -S --noconfirm base-devel git gnupg

          # --- FIX DEFINITIVO: CLONE MANUALE ---
          # Cloniamo manualmente il repository per essere sicuri al 100%
          # che la cartella .git sia presente.
          echo "Cloning the repository manually..."
          git clone "https://x-access-token:${{ secrets.PUBLISH_TOKEN }}@github.com/pieroproietti/penguins-eggs-repo.git" repo-dir
          
          # Spostiamo il nuovo pacchetto nella sua destinazione
          mv ./artifact/*.pkg.tar.zst ./repo-dir/arch/

          # Configurazione GPG
          echo "${{ secrets.GPG_SIGNING_KEY }}" | gpg --import --batch
          mkdir -p ~/.gnupg
          echo "pinentry-mode loopback" > ~/.gnupg/gpg.conf
          echo "allow-loopback-pinentry" > ~/.gnupg/gpg-agent.conf
          gpg-connect-agent reloadagent /bye
          echo "${{ secrets.GPG_PASSPHRASE }}" | gpg --batch --yes --passphrase-fd 0 -o /dev/null -s /dev/null

          # Trova il file più recente, ora che il repo è clonato correttamente
          NEW_PKG_FILE=$(ls -vr repo-dir/arch/penguins-eggs-*.pkg.tar.zst | head -n 1)
          
          echo "Found new package: $NEW_PKG_FILE"
          echo "Updating repository database..."
          
          # Aggiorna il DB
          repo-add --sign --key "${{ secrets.GPG_KEY_ID }}" repo-dir/arch/penguins-eggs.db.tar.gz "$NEW_PKG_FILE"
          echo "Database updated successfully."

          # Spostati dentro il repository clonato per il push
          cd ./repo-dir
          
          # Configura utente Git
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

          # Aggiungi, committa e fai il push
          git add .
          if ! git diff --staged --quiet; then
            git commit -m "Update Arch Linux repository with $(basename $NEW_PKG_FILE)"
            echo "Pushing changes..."
            git push
          else
            echo "No changes to commit."
          fi
        env:
          GPG_SIGNING_KEY: ${{ secrets.GPG_SIGNING_KEY }}
          GPG_KEY_ID: ${{ secrets.GPG_KEY_ID }}
          GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
